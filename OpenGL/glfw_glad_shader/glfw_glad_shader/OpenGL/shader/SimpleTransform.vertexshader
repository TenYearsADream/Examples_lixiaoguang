#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec2 vertexTexCoords;
layout(location = 3) in vec4 vertexColor;

// Output data ; will be interpolated for each fragment.
out vec4 fragmentColor;
out vec2 TexCoords;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

uniform mat4 Projection;
uniform mat4 View;
uniform mat4 WorldModel;

void main()
{

	// Output position of the vertex, in clip space : MVP * position
	//gl_Position =  MVP * vec4(vertexPosition,1);
	gl_Position = Projection * View * WorldModel *vec4(vertexPosition,1);



	// The color of each vertex will be interpolated
	// to produce the color of each fragment
	fragmentColor = vertexColor;

	// TexCoords. No special space for this one.
	TexCoords = vertexTexCoords;

}

